{"ast":null,"code":"function locationKey(x, y) {\n  return \"[\" + x + \",\" + y + \"]\";\n}\n\nclass EditorStateHandler {\n  constructor(tileset) {\n    this.getState = () => {\n      return { ...this.editorHistory[this.editorHistory.length - 1]\n      };\n    };\n\n    this.pushState = state => {\n      // Copy the state and add it to the history\n      const stateCopy = { ...state\n      };\n      this.editorHistory.push(stateCopy);\n      const historyLength = this.editorHistory.length;\n\n      if (historyLength >= 20) {\n        this.editorHistory.shift();\n      }\n    };\n\n    this.addTile = (x, y, tileData) => {\n      const state = this.getState();\n      const category = tileData.category;\n\n      if (!(category in state.tileTypeCount)) {\n        state.tileTypeCount[category] = 0;\n      }\n\n      const location = locationKey(x, y);\n\n      if (tileData.maxInstances != -1 && state.tileTypeCount[category] + 1 > tileData.maxInstances) {\n        return false;\n      }\n\n      if (state.tiles[location]) {\n        this.removeTile(x, y);\n      }\n\n      state.tiles[location] = { ...tileData,\n        x,\n        y\n      };\n      state.tileTypeCount[category]++;\n      this.pushState(state);\n    };\n\n    this.removeTile = (x, y) => {\n      const state = this.getState();\n      const tileData = state.tiles[locationKey(x, y)];\n      state.tileTypeCount[tileData.category]--;\n      delete state.tiles[locationKey(x, y)];\n      this.pushState(state);\n    };\n\n    this.clearState = () => {\n      const clearedState = {\n        tiles: {},\n        levelName: \"mylevel\",\n        tileTypeCount: {}\n      };\n      this.pushState(clearedState);\n    };\n\n    console.log(\"EditorState initialized\");\n    this.editorHistory = [];\n    this.tileset = tileset;\n    this.initialState = {\n      tiles: {},\n      levelName: \"mylevel\",\n      tileTypeCount: {}\n    };\n    this.pushState(this.initialState);\n    this.createInitialState();\n  }\n\n  createInitialState() {\n    const wallTile = this.tileset.allTiles[\"Walls\"][0];\n    const floorTile = this.tileset.allTiles[\"Floor\"][0];\n    const humanTile = this.tileset.allTiles[\"Player\"][0];\n    const stairsTile = this.tileset.allTiles[\"Staircase\"][0];\n    const monsterTile = this.tileset.allTiles[\"Monster\"][0];\n    const height = 8;\n    const width = 13;\n    const widthOffset = 1;\n    const heightOffset = 1; // Draw vertical walls\n\n    [0, width - 1].forEach(x => {\n      for (let y = 0; y < height; y++) {\n        this.addTile(widthOffset + x, heightOffset + y, wallTile);\n      }\n    }); // Draw horizontal walls\n\n    [0, height - 1].forEach(y => {\n      for (let x = 0; x < width; x++) {\n        this.addTile(widthOffset + x, heightOffset + y, wallTile);\n      }\n    }); // Fill in floor\n\n    for (let y = 1; y < height - 1; y++) {\n      for (let x = 1; x < width - 1; x++) {\n        this.addTile(widthOffset + x, heightOffset + y, floorTile);\n      }\n    } // Place human in middle left\n\n\n    this.addTile(widthOffset + 1, heightOffset + height / 2, humanTile); // Place stairs in top right\n\n    this.addTile(widthOffset + width - 2, heightOffset + height - 2, stairsTile); // Monster bottom right\n\n    this.addTile(widthOffset + width - 2, heightOffset + 1, monsterTile);\n  }\n\n}\n\nexport default EditorStateHandler;\nexport { locationKey };","map":{"version":3,"sources":["/Users/xiaochentian/Desktop/43008_RL_Reinforcement_Learning/Assignment3/43008_RL_MiniHack/src/EditorStateHandler.js"],"names":["locationKey","x","y","EditorStateHandler","constructor","tileset","getState","editorHistory","length","pushState","state","stateCopy","push","historyLength","shift","addTile","tileData","category","tileTypeCount","location","maxInstances","tiles","removeTile","clearState","clearedState","levelName","console","log","initialState","createInitialState","wallTile","allTiles","floorTile","humanTile","stairsTile","monsterTile","height","width","widthOffset","heightOffset","forEach"],"mappings":"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","sourcesContent":["function locationKey(x, y) {\n  return \"[\" + x + \",\" + y + \"]\";\n}\n\nclass EditorStateHandler {\n  constructor(tileset) {\n    console.log(\"EditorState initialized\");\n\n    this.editorHistory = [];\n\n    this.tileset = tileset;\n\n    this.initialState = {\n      tiles: {},\n      levelName: \"mylevel\",\n      tileTypeCount: {},\n    };\n\n    this.pushState(this.initialState);\n    this.createInitialState();\n  }\n\n  createInitialState() {\n    const wallTile = this.tileset.allTiles[\"Walls\"][0];\n    const floorTile = this.tileset.allTiles[\"Floor\"][0];\n    const humanTile = this.tileset.allTiles[\"Player\"][0];\n    const stairsTile = this.tileset.allTiles[\"Staircase\"][0];\n    const monsterTile = this.tileset.allTiles[\"Monster\"][0];\n\n    const height = 8;\n    const width = 13;\n\n    const widthOffset = 1;\n    const heightOffset = 1;\n\n    // Draw vertical walls\n    [0, width - 1].forEach((x) => {\n      for (let y = 0; y < height; y++) {\n        this.addTile(widthOffset + x, heightOffset + y, wallTile);\n      }\n    });\n\n    // Draw horizontal walls\n    [0, height - 1].forEach((y) => {\n      for (let x = 0; x < width; x++) {\n        this.addTile(widthOffset + x, heightOffset + y, wallTile);\n      }\n    });\n\n    // Fill in floor\n    for (let y = 1; y < height - 1; y++) {\n      for (let x = 1; x < width - 1; x++) {\n        this.addTile(widthOffset + x, heightOffset + y, floorTile);\n      }\n    }\n\n    // Place human in middle left\n    this.addTile(widthOffset + 1, heightOffset + height / 2, humanTile);\n\n    // Place stairs in top right\n    this.addTile(\n      widthOffset + width - 2,\n      heightOffset + height - 2,\n      stairsTile\n    );\n\n    // Monster bottom right\n    this.addTile(widthOffset + width - 2, heightOffset + 1, monsterTile);\n  }\n\n  getState = () => {\n    return { ...this.editorHistory[this.editorHistory.length - 1] };\n  };\n\n  pushState = (state) => {\n    // Copy the state and add it to the history\n    const stateCopy = { ...state };\n    this.editorHistory.push(stateCopy);\n\n    const historyLength = this.editorHistory.length;\n\n    if (historyLength >= 20) {\n      this.editorHistory.shift();\n    }\n  };\n\n  addTile = (x, y, tileData) => {\n    const state = this.getState();\n    const category = tileData.category;\n    if (!(category in state.tileTypeCount)) {\n      state.tileTypeCount[category] = 0;\n    }\n\n    const location = locationKey(x, y);\n\n    if (\n      tileData.maxInstances != -1 &&\n      state.tileTypeCount[category] + 1 > tileData.maxInstances\n    ) {\n      return false;\n    }\n\n    if (state.tiles[location]) {\n      this.removeTile(x, y);\n    }\n\n    state.tiles[location] = { ...tileData, x, y };\n\n    state.tileTypeCount[category]++;\n\n    this.pushState(state);\n  };\n\n  removeTile = (x, y) => {\n    const state = this.getState();\n\n    const tileData = state.tiles[locationKey(x, y)];\n    state.tileTypeCount[tileData.category]--;\n    delete state.tiles[locationKey(x, y)];\n\n    this.pushState(state);\n  };\n\n  clearState = () => {\n    const clearedState = {\n      tiles: {},\n      levelName: \"mylevel\",\n      tileTypeCount: {},\n    };\n\n    this.pushState(clearedState);\n  };\n}\n\nexport default EditorStateHandler;\nexport { locationKey };\n"]},"metadata":{},"sourceType":"module"}